"use client"

import { useEffect, useState } from 'react'
import Image from 'next/image'
import { QRModal } from './qr/QRModal'

export function SummaryModal({ open, onOpenChange, sessionToken }: { open: boolean; onOpenChange: (v: boolean) => void; sessionToken?: string }) {
  const [pdfUrl, setPdfUrl] = useState<string | null>(null)
  const [highlights, setHighlights] = useState<string[]>([])
  const [readingTime, setReadingTime] = useState<number>(0)
  const [showQR, setShowQR] = useState(false)
  const [latestDate, setLatestDate] = useState<string | null>(null)
  const [history, setHistory] = useState<Array<{ id: string; createdAt: number; summary: string; highlights: string[] }>>([])

  useEffect(() => {
    if (!open) return
    const run = async () => {
      const res = await fetch('/api/summary', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sessionToken }) })
      const data = await res.json()
      
      // Ensure absolute PDF URL for production
      let pdfUrlResolved = data.pdfUrl
      if (pdfUrlResolved && !pdfUrlResolved.startsWith('http')) {
        pdfUrlResolved = `${window.location.origin}${data.pdfUrl}`
      }
      
      setPdfUrl(pdfUrlResolved)
      setHighlights(data.highlights)
      setReadingTime(data.readTimeSec)
      if (data.latestCreatedAt) setLatestDate(new Date(data.latestCreatedAt).toLocaleString())
      if (Array.isArray(data.history)) setHistory(data.history)
    }
    run()
  }, [open, sessionToken])

  if (!open) return null

  return (
    <div className="fixed inset-0 bg-black/60 modal-backdrop z-50 flex items-center justify-center p-4" role="dialog" aria-modal>
      <div className="w-full max-w-4xl max-h-[90vh] bg-black/70 border border-white/20 rounded-2xl backdrop-blur-md shadow-2xl animate-scale-in flex flex-col overflow-hidden">
        <div className="flex-shrink-0 p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-gradient-to-r from-teal-500 to-teal-600 rounded-lg shadow-lg">
                <Image src="/CARe-logo.png" alt="CARe" width={96} height={24} className="h-6 w-auto brightness-0 invert" />
              </div>
              <div className="animate-fade-in">
                <div className="text-lg font-semibold text-white">AI Summary Report</div>
                <div className="text-sm text-white/60">ðŸ“– Reading time: {readingTime || 45}s  â€¢  ðŸ¤– Generated by CARe AI</div>
              </div>
            </div>
            <button 
              onClick={() => onOpenChange(false)} 
              className="text-white/60 hover:text-white/80 text-sm px-3 py-1 rounded-lg hover:bg-white/10 transition-all duration-200"
            >
              âœ• Close
            </button>
          </div>
        </div>
        
        <div className="flex-1 overflow-y-auto px-6 pb-6 space-y-4 custom-scrollbar">
          {latestDate && (
            <div className="flex items-center gap-2 text-sm text-white/50 bg-white/5 rounded-lg px-3 py-2 animate-slide-up">
              <span>ðŸ“…</span>
              <span>Generated: {latestDate}</span>
            </div>
          )}
          
          {highlights.length > 0 && (
            <div className="space-y-3 animate-fade-in">
              <h3 className="text-white font-medium flex items-center gap-2">
                <span>âš¡</span>
                <span>Critical Findings</span>
              </h3>
              <div className="grid gap-2">
                {highlights.map((h, i) => (
                  <div key={i} className="flex items-start gap-3 p-3 bg-gradient-to-r from-teal-500/10 to-transparent rounded-lg border border-teal-500/20 hover:from-teal-500/20 transition-all duration-200">
                    <div className="w-2 h-2 rounded-full bg-teal-400 mt-2 flex-shrink-0 animate-float"></div>
                    <span className="text-white/90 text-sm leading-relaxed">{h}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* {pdfUrl ? (
            <div className="rounded-xl overflow-hidden border border-white/20 h-[50vh] bg-white/5 backdrop-blur-sm pdf-container animate-slide-up">
              <div className="bg-gradient-to-r from-teal-600 to-teal-700 p-3 flex items-center justify-between">
                <div className="flex items-center gap-2 text-white text-sm font-medium">
                  <span>ðŸ“„</span>
                  <span>Enhanced PDF Report</span>
                </div>
                <div className="text-white/80 text-xs">Professional Healthcare Document</div>
              </div>
              <iframe src={pdfUrl} className="w-full h-full bg-white" />
            </div>
          ) : (
            <div className="h-96 bg-gradient-to-br from-teal-500/10 to-blue-500/10 rounded-xl border border-white/10 flex items-center justify-center animate-gradient">
              <div className="text-center space-y-3 animate-fade-in">
                <div className="w-12 h-12 border-4 border-teal-500/30 border-t-teal-500 rounded-full animate-spin mx-auto"></div>
                <div className="text-white/70 font-medium">Generating enhanced PDF report...</div>
                <div className="text-white/50 text-sm">Creating professional layout with modern design</div>
              </div>
            </div>
          )} */}
          
          {history.length > 0 && (
            <div className="pt-4 border-t border-white/20">
              <div className="text-white font-medium mb-3 flex items-center gap-2">
                <span>ðŸ“ˆ</span>
                <span>Assessment History ({history.length} previous)</span>
              </div>
              <div className="space-y-3 max-h-48 overflow-y-auto pr-2 custom-scrollbar">
                {history.map(h => (
                  <div key={h.id} className="p-3 bg-white/5 rounded-lg border border-white/10 hover:bg-white/10 transition-colors">
                    <div className="flex items-center gap-2 text-white/60 text-xs mb-2">
                      <span>ðŸ“…</span>
                      <span>{new Date(h.createdAt).toLocaleString()}</span>
                    </div>
                    <div className="text-white/85 text-sm leading-relaxed">{h.summary}</div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <div className="flex gap-3 pt-2">
            <a 
              href={pdfUrl ?? '#'} 
              download 
              className="flex-1 px-6 py-3 rounded-xl bg-gradient-to-r from-white/10 to-white/5 hover:from-white/20 hover:to-white/10 text-center border border-white/20 hover:border-white/30 transition-all duration-200 text-white font-medium"
            >
              ðŸ“¥ Download PDF
            </a>
            <button 
              onClick={() => setShowQR(true)} 
              className="flex-1 px-6 py-3 rounded-xl bg-gradient-to-r from-teal-600 to-teal-700 hover:from-teal-500 hover:to-teal-600 text-center transition-all duration-200 text-white font-medium shadow-lg"
            >
              ðŸ“± Show QR
            </button>
          </div>
        </div>
        
        <QRModal open={showQR} onOpenChange={setShowQR} sessionToken={sessionToken} pdfUrl={pdfUrl ?? undefined} />
      </div>
    </div>
  )
}
